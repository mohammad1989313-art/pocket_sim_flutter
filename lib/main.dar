// lib/main.dart
import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(const AbuKhairApp());
}

class AbuKhairApp extends StatelessWidget {
  const AbuKhairApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'أبو الخير',
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color(0xFF0B0F14),
        primaryColor: Colors.greenAccent,
        colorScheme: ColorScheme.dark(
          primary: Colors.greenAccent,
          secondary: Colors.greenAccent.shade100,
        ),
        textTheme: const TextTheme(
          bodyLarge: TextStyle(fontSize: 16),
          headlineSmall: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
      ),
      home: const TradingHomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class TradingHomePage extends StatefulWidget {
  const TradingHomePage({super.key});
  @override
  State<TradingHomePage> createState() => _TradingHomePageState();
}

class _TradingHomePageState extends State<TradingHomePage> {
  final Random _rnd = Random();
  final List<double> _prices = [];
  Timer? _timer;
  double _balance = 1000.0;
  String _signal = '—';
  String _timeLabel = '';

  @override
  void initState() {
    super.initState();
    // init with some seed prices
    double base = 1.10000;
    for (int i = 0; i < 30; i++) {
      base += (_rnd.nextDouble() - 0.5) * 0.0020;
      _prices.add(double.parse(base.toStringAsFixed(5)));
    }
    _timeLabel = DateFormat.Hms().format(DateTime.now());
    _timer = Timer.periodic(const Duration(seconds: 3), (_) => _tick());
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  void _tick() {
    setState(() {
      double last = _prices.isNotEmpty ? _prices.last : 1.10000;
      // small random walk
      double next = last + (_rnd.nextDouble() - 0.5) * 0.0012;
      next = double.parse(next.toStringAsFixed(5));
      _prices.add(next);
      if (_prices.length > 60) _prices.removeAt(0);

      // generate a simple "signal" based on moving average
      double shortMA = _movingAverage(_prices, 5);
      double longMA = _movingAverage(_prices, 14);
      if (shortMA > longMA + 0.00005) _signal = 'CALL';
      else if (shortMA < longMA - 0.00005) _signal = 'PUT';
      else _signal = '—';

      _timeLabel = DateFormat.Hms().format(DateTime.now());
    });
  }

  double _movingAverage(List<double> list, int n) {
    if (list.length < n) return list.last;
    double sum = 0;
    for (int i = list.length - n; i < list.length; i++) sum += list[i];
    return sum / n;
  }

  List<FlSpot> _spots() {
    List<FlSpot> out = [];
    for (int i = 0; i < _prices.length; i++) {
      out.add(FlSpot(i.toDouble(), _prices[i]));
    }
    return out;
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final lastPrice = _prices.isNotEmpty ? _prices.last : 0.0;
    return Scaffold(
      appBar: AppBar(
        title: const Text('أبو الخير'),
        centerTitle: true,
        elevation: 0,
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
        child: Column(
          children: [
            Card(
              color: const Color(0xFF0F1720),
              child: Padding(
                padding: const EdgeInsets.all(14),
                child: Column(
                  children: [
                    Text(
                      'أهلاً بك في تطبيق أبو الخير لتوقع حركة السوق',
                      style: theme.textTheme.headlineSmall,
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 10),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                          const Text('Balance', style: TextStyle(color: Colors.white70)),
                          const SizedBox(height: 6),
                          Text('\$${_balance.toStringAsFixed(2)}', style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.greenAccent))
                        ]),
                        Column(crossAxisAlignment: CrossAxisAlignment.end, children: [
                          const Text('Last price', style: TextStyle(color: Colors.white70)),
                          const SizedBox(height: 6),
                          Text('${lastPrice.toStringAsFixed(5)}', style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                          const SizedBox(height: 4),
                          Text('Updated: $_timeLabel', style: const TextStyle(color: Colors.white54, fontSize: 12))
                        ])
                      ],
                    )
                  ],
                ),
              ),
            ),
            const SizedBox(height: 10),
            // Chart
            Expanded(
              child: Card(
                color: const Color(0xFF071018),
                child: Padding(
                  padding: const EdgeInsets.all(12),
                  child: _prices.isEmpty
                      ? const Center(child: CircularProgressIndicator())
                      : LineChart(
                          LineChartData(
                            gridData: FlGridData(show: true, drawVerticalLine: false, getDrawingHorizontalLine: (v) => FlLine(color: Colors.white10, strokeWidth: 1)),
                            titlesData: FlTitlesData(show: false),
                            minY: (_prices.reduce((a, b) => a < b ? a : b)) * 0.999,
                            maxY: (_prices.reduce((a, b) => a > b ? a : b)) * 1.001,
                            lineBarsData: [
                              LineChartBarData(
                                spots: _spots(),
                                isCurved: true,
                                color: Colors.greenAccent.shade200,
                                barWidth: 2,
                                dotData: FlDotData(show: false),
                              ),
                            ],
                          ),
                        ),
                ),
              ),
            ),
            const SizedBox(height: 8),
            Card(
              color: const Color(0xFF0F1720),
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                child: Row(
                  children: [
                    Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                      const Text('Signal', style: TextStyle(color: Colors.white70)),
                      const SizedBox(height: 6),
                      Text(_signal, style: TextStyle(fontSize: 26, fontWeight: FontWeight.bold, color: _signal == 'CALL' ? Colors.greenAccent : _signal == 'PUT' ? Colors.redAccent : Colors.white)),
                    ]),
                    const Spacer(),
                    Column(crossAxisAlignment: CrossAxisAlignment.end, children: [
                      const Text('Status', style: TextStyle(color: Colors.white70)),
                      const SizedBox(height: 6),
                      Text('Demo / Display only', style: const TextStyle(color: Colors.white70))
                    ])
                  ],
                ),
              ),
            ),
            const SizedBox(height: 10),
          ],
        ),
      ),
    );
  }
}
